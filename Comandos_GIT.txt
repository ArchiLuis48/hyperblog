git init > inicial el git.

git add agregar a área de preparación.
git add. agregar a área de preparación todos los cambios que encuentre.

git status > muestra mi ubicación y versión actual, sabiendo hay cambios o commit pendientes.
git show > muestra los cambio en los que estoy actualmente (Salir con Q).
git log > muestra lista de versiones realizadas.
git log --stat > muestra los cambios realizados.


git commit > enviamos todos lo del stageng al repositorio.
git commit -m > enviamos todos lo del stageng con un comentario.
git commit -a hacer el guardado automaticamente de todos los cambios (solo a archivos ya add anteriormente).
git commit -am igual que a pero agregando el mensaje de la versión.
*** ESC + I para editar el texto que agregare al comentario en el editor.
*** Si no agregas el comentario debes escribirlo y salir y guardar con :wq o ESC + SHIFF + ZZ


git clone push > envio todo al servidor remoto.
git clone url > trae los archivos l directorio local.

git fetch > trae una copia local, pero no lo copia en mis archivos.
git merge > copia a mis archivos.
git pull  > copia a local, bd de cambios y el directorio.


git branch > creo una nueva rama.
git checkout nombre > me ubico en la rama que cree.
 


Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

git log --oneline  - Te muestra el id commit y el título del commit.
git log --decorate - Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

Master